"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sqlite3_last_insert_rowid = exports.sqlite3_changes = exports.sqlite3_exec = exports.sqlite3_clear_bindings = exports.sqlite3_reset = exports.sqlite3_finalize_silent = exports.sqlite3_finalize = exports.sqlite3_column_text = exports.sqlite3_column_double = exports.sqlite3_column_int = exports.sqlite3_column_name = exports.sqlite3_column_type = exports.sqlite3_column_count = exports.sqlite3_step = exports.sqlite3_bind_null = exports.sqlite3_bind_text = exports.sqlite3_bind_int = exports.sqlite3_bind_double = exports.sqlite3_bind_parameter_index = exports.sqlite3_prepare_v2 = exports.sqlite3_close = exports.sqlite3_close_v2 = exports.sqlite3_open_v2 = void 0;
const util_1 = require("util");
const native = require("../sqlite3.pure");
const NUMBER = 'number';
const STRING = 'string';
const NULL = 'null';
// change to `true` manually for some debugging
const DEBUG_SQLITE = false;
let cwrap = native.cwrap;
if (DEBUG_SQLITE) {
    cwrap = (name, returnType, argTypes) => {
        const exportedFn = native.cwrap(name, returnType, argTypes);
        return (...args) => {
            console.log(name, ...args);
            return exportedFn(...args);
        };
    };
}
function storeString(string) {
    const len = native.lengthBytesUTF8(string);
    const ptr = native._malloc(len + 1);
    native.stringToUTF8(string, ptr, len + 1);
    return { len, ptr };
}
const decoder = new util_1.TextDecoder();
function retrieveOutString() {
    const len = native.getValue(native.lengthOutPtr, 'i32');
    const ptr = native.getValue(native.stringOutPtr, 'i32');
    const view = new Uint8Array(native.HEAP8.buffer, ptr, len);
    return decoder.decode(view);
}
exports.sqlite3_open_v2 = cwrap('sqlite3_open_v2_x', NUMBER, [
    STRING,
    NUMBER,
]);
exports.sqlite3_close_v2 = cwrap('sqlite3_close_v2_x', NULL, [NUMBER]);
exports.sqlite3_close = cwrap('sqlite3_close_x', NULL, [NUMBER]);
exports.sqlite3_prepare_v2 = cwrap('sqlite3_prepare_v2_x', NUMBER, [
    NUMBER,
    STRING,
]);
exports.sqlite3_bind_parameter_index = native.cwrap('sqlite3_bind_parameter_index_x', NUMBER, [NUMBER, STRING]);
exports.sqlite3_bind_double = cwrap('sqlite3_bind_double_x', NULL, [NUMBER, NUMBER, NUMBER, NUMBER]);
exports.sqlite3_bind_int = cwrap('sqlite3_bind_int_x', NULL, [NUMBER, NUMBER, NUMBER, NUMBER]);
const sqlite3_bind_text_x = cwrap('sqlite3_bind_text_x', NULL, [NUMBER, NUMBER, NUMBER, NUMBER, NUMBER]);
const sqlite3_bind_text = (stmt, db, param, value) => {
    const { len, ptr } = storeString(value);
    try {
        sqlite3_bind_text_x(stmt, db, param, ptr, len);
    }
    finally {
        native._free(ptr);
    }
};
exports.sqlite3_bind_text = sqlite3_bind_text;
exports.sqlite3_bind_null = cwrap('sqlite3_bind_null_x', NULL, [
    NUMBER,
    NUMBER,
    NUMBER,
]);
exports.sqlite3_step = cwrap('sqlite3_step_x', 'boolean', [NUMBER, NUMBER]);
exports.sqlite3_column_count = cwrap('sqlite3_column_count_x', NUMBER, [NUMBER]);
exports.sqlite3_column_type = cwrap('sqlite3_column_type_x', NUMBER, [
    NUMBER,
    NUMBER,
]);
exports.sqlite3_column_name = cwrap('sqlite3_column_name_x', STRING, [
    NUMBER,
    NUMBER,
]);
exports.sqlite3_column_int = cwrap('sqlite3_column_int_x', NUMBER, [
    NUMBER,
    NUMBER,
]);
exports.sqlite3_column_double = cwrap('sqlite3_column_double_x', NUMBER, [
    NUMBER,
    NUMBER,
]);
const sqlite3_column_text_x = cwrap('sqlite3_column_text_x', NULL, [
    NUMBER,
    NUMBER,
]);
const sqlite3_column_text = (stmt, index) => {
    sqlite3_column_text_x(stmt, index);
    return retrieveOutString();
};
exports.sqlite3_column_text = sqlite3_column_text;
exports.sqlite3_finalize = cwrap('sqlite3_finalize_x', NULL, [NUMBER, NUMBER]);
exports.sqlite3_finalize_silent = cwrap('sqlite3_finalize_silent_x', NULL, [NUMBER]);
exports.sqlite3_reset = cwrap('sqlite3_reset_x', NULL, [NUMBER, NUMBER]);
exports.sqlite3_clear_bindings = cwrap('sqlite3_clear_bindings_x', NULL, [NUMBER]);
exports.sqlite3_exec = cwrap('sqlite3_exec_x', NULL, [NUMBER, STRING]);
exports.sqlite3_changes = cwrap('sqlite3_changes_x', NUMBER, [NUMBER]);
exports.sqlite3_last_insert_rowid = cwrap('sqlite3_last_insert_rowid_x', NUMBER, [NUMBER]);
